{"version":3,"sources":["logo.svg","App.js","graphql/queries.js","graphql/mutations.js","graphql/subscriptions.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","CLIENT_ID","uuid","console","log","App","initialState","notes","loading","error","form","name","description","useReducer","state","action","type","note","value","dispatch","fetchNotes","a","API","graphql","query","notesData","data","listNotes","items","createNote","alert","clientId","completed","id","variables","input","onChange","e","target","deleteNote","noteToDelete","filter","x","err","updateNote","map","useEffect","subscription","subscribe","next","noteData","onCreateNote","unsubscribe","styles","container","padding","marginBottom","item","textAlign","p","color","style","placeholder","onClick","dataSource","renderItem","Item","actions","Meta","title","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e8464fa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useReducer } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { API } from 'aws-amplify';\r\nimport { List, Input, Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { listNotes } from './graphql/queries';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\nimport { \r\n  createNote as CreateNote\r\n  , deleteNote as DeleteNote \r\n  , updateNote as UpdateNote\r\n} from './graphql/mutations';\r\n\r\nimport { onCreateNote } from './graphql/subscriptions';\r\n\r\nconst CLIENT_ID = uuid();\r\nconsole.log(CLIENT_ID);\r\n\r\nconst App = () => {\r\n\r\n  const initialState = {\r\n    notes: []\r\n    , loading: true\r\n    , error: false\r\n    , form: {\r\n        name: ''\r\n        , description: ''\r\n    }\r\n  };\r\n\r\n  const reducer = (state, action) => {\r\n\r\n    switch(action.type) {\r\n      \r\n      case 'SET_NOTES': \r\n        return {\r\n          ...state\r\n          , notes: action.notes\r\n          , loading: false\r\n        };\r\n      \r\n      case 'ERROR':\r\n        return {\r\n          ...state\r\n          , loading: false\r\n          , error: true\r\n        };\r\n\r\n      case 'ADD_NOTE':\r\n        return {\r\n          ...state\r\n          , notes: [\r\n            ...state.notes\r\n            , action.note \r\n          ]\r\n        };\r\n\r\n      case 'RESET_FORM':\r\n        return {\r\n          ...state\r\n          , form: initialState.form\r\n        };\r\n\r\n      case 'SET_INPUT':\r\n        return {\r\n          ...state\r\n          , form: {\r\n            ...state.form\r\n            , [action.name]: action.value\r\n          }\r\n        };\r\n\r\n      default:\r\n        return { \r\n          ...state \r\n        };\r\n    }\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const fetchNotes = async () => {\r\n    try {\r\n      \r\n      const notesData = await API.graphql({\r\n        query: listNotes\r\n      });\r\n      \r\n      console.log(notesData);\r\n      \r\n      dispatch({\r\n        type: 'SET_NOTES'\r\n        , notes: notesData.data.listNotes.items\r\n      });\r\n    }\r\n\r\n    catch (err) {\r\n      console.error(err);\r\n      dispatch({\r\n        type: 'ERROR'\r\n      }); \r\n    }\r\n  }\r\n\r\n  const createNote = async () => {\r\n    \r\n    // Destructuring the form object out of the current state.\r\n    const { form } = state;\r\n\r\n    // Lame form validation, uses alert : - (\r\n    if (!form.name || !form.description) {\r\n      return alert('Please enter a name and description');\r\n    }\r\n\r\n    const note = {\r\n      ...form // spreads in name and description\r\n      , clientId: CLIENT_ID\r\n      , completed: false\r\n      , id: uuid()\r\n    };\r\n\r\n    dispatch({\r\n      type: 'ADD_NOTE'\r\n      , note // same as note: note, JS shorthand syntax for creating properties with the same name as their value\r\n    });\r\n\r\n    dispatch({\r\n      type: 'RESET_FORM'\r\n    });\r\n\r\n    try {\r\n      await API.graphql({\r\n        query: CreateNote\r\n        , variables: {\r\n          input: note\r\n        }\r\n      });\r\n\r\n      console.log(\"Successfully created a note ! ! !\");\r\n\r\n    }\r\n\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    dispatch({\r\n      type: 'SET_INPUT'\r\n      , name: e.target.name\r\n      , value: e.target.value\r\n    });\r\n  }\r\n\r\n  const deleteNote = async (noteToDelete) => {\r\n\r\n    console.log(noteToDelete);\r\n\r\n    dispatch({ \r\n      type: 'SET_NOTES'\r\n      , notes: state.notes.filter(x => x !== noteToDelete)\r\n    });\r\n    \r\n    try {\r\n      await API.graphql({\r\n        query: DeleteNote,\r\n        variables: { \r\n          input: { \r\n            id: noteToDelete.id \r\n          } \r\n        }\r\n      })\r\n      \r\n      console.log('successfully deleted note!')\r\n      \r\n    } catch (err) {\r\n        console.error({ err })\r\n    }\r\n  }\r\n\r\n\r\n  const updateNote = async (note) => {\r\n\r\n    dispatch({ \r\n      type: 'SET_NOTES'\r\n      , notes: state.notes.map(x =>({\r\n        ...x\r\n        , completed: x == note ? !x.completed : x.completed\r\n      }))\r\n    })\r\n\r\n    try {\r\n      await API.graphql({\r\n        query: UpdateNote\r\n        , variables: { \r\n          input: { \r\n            id: note.id\r\n            , completed: !note.completed \r\n          } \r\n      }\r\n    })\r\n      console.log('note successfully updated!')\r\n    } catch (err) {\r\n      console.log('error: ', err)\r\n    }\r\n  }\r\n\r\n  useEffect(\r\n    () => {\r\n      \r\n      fetchNotes();\r\n\r\n      const subscription = API.graphql({\r\n        query: onCreateNote\r\n      })\r\n        .subscribe({\r\n          next: (noteData) => {\r\n            console.log(noteData);\r\n            const note = noteData.value.data.onCreateNote;\r\n\r\n            if (CLIENT_ID === note.clientId) \r\n              return;\r\n            \r\n            dispatch({ \r\n              type: 'ADD_NOTE'\r\n              , note // shorthand for note: note \r\n            });\r\n          }\r\n        });\r\n        \r\n        return () => subscription.unsubscribe();\r\n  }\r\n    , []\r\n  );\r\n\r\n  const styles = {\r\n    //container: { padding: new Date().getSeconds() % 2 == 0 ? 20 : 200 },\r\n    container: { padding: 20 },\r\n    input: {marginBottom: 10},\r\n    item: { textAlign: 'left' },\r\n    p: { color: '#1890ff' }\r\n  }\r\n\r\n  const renderItem = (item) => {\r\n    return (\r\n      <List.Item\r\n        style={styles.item}\r\n        actions={[\r\n          <p \r\n            style={styles.p} \r\n            onClick={() => deleteNote(item)}>\r\n              Delete\r\n          </p>\r\n          , <p \r\n              style={styles.p} \r\n              onClick={() => updateNote(item)}\r\n            >\r\n              {item.completed ? 'Mark Incomplete' : 'Mark Complete'}\r\n          </p>\r\n        ]}\r\n      >\r\n        <List.Item.Meta\r\n          title={ item.completed ? item.name + ' (complete)' : item.name }\r\n          description={item.description}\r\n        />\r\n      </List.Item>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={styles.container}\r\n    >\r\n      <Input \r\n        placeholder='Note Name'\r\n        style={styles.input}\r\n        name='name'\r\n        onChange={onChange}\r\n        value={state.form.name}\r\n      />\r\n      <Input \r\n        placeholder='Note Description'\r\n        style={styles.input}\r\n        name='description'\r\n        onChange={onChange}\r\n        value={state.form.description}\r\n      />\r\n      <Button\r\n        type='primary'\r\n        onClick={createNote}\r\n      >\r\n        Create New Note\r\n      </Button>\r\n      <List \r\n        loading={state.loading}\r\n        dataSource={state.notes}\r\n        renderItem={renderItem}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://pdl3iywjxrdbjahki3mt5ww424.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-gf3iccw4ezesnclx3gwwizykga\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}